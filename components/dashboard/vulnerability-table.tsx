"use client"

import { AlertTriangle, AlertCircle, AlertOctagon } from "lucide-react"
import { Badge } from "@/components/ui/badge"

const vulnerabilities = [
  {
    id: 1,
    title: "SQL Injection in User Login",
    severity: "critical",
    status: "open",
    repository: "auth-service",
    date: "2 hours ago",
  },
  {
    id: 2,
    title: "XSS Vulnerability in Comment Form",
    severity: "high",
    status: "in-progress",
    repository: "web-app",
    date: "5 hours ago",
  },
  {
    id: 3,
    title: "Weak Password Hashing Algorithm",
    severity: "high",
    status: "open",
    repository: "auth-service",
    date: "1 day ago",
  },
  {
    id: 4,
    title: "Unvalidated Redirect",
    severity: "medium",
    status: "resolved",
    repository: "api-gateway",
    date: "2 days ago",
  },
  {
    id: 5,
    title: "Missing CSRF Token Validation",
    severity: "high",
    status: "open",
    repository: "web-app",
    date: "3 days ago",
  },
]

export function VulnerabilityTable() {
  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case "critical":
        return <AlertOctagon className="w-4 h-4" />
      case "high":
        return <AlertTriangle className="w-4 h-4" />
      default:
        return <AlertCircle className="w-4 h-4" />
    }
  }

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical":
        return "bg-destructive/20 text-destructive border-destructive/30"
      case "high":
        return "bg-orange-500/20 text-orange-400 border-orange-500/30"
      default:
        return "bg-yellow-500/20 text-yellow-400 border-yellow-500/30"
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case "open":
        return "bg-red-500/20 text-red-400"
      case "in-progress":
        return "bg-blue-500/20 text-blue-400"
      case "resolved":
        return "bg-green-500/20 text-green-400"
      default:
        return "bg-gray-500/20 text-gray-400"
    }
  }

  return (
    <div className="glass rounded-lg overflow-hidden">
      <div className="p-6 border-b border-border/50">
        <h2 className="text-lg font-semibold">Recent Vulnerabilities</h2>
      </div>

      <div className="overflow-x-auto">
        <table className="w-full">
          <thead>
            <tr className="border-b border-border/50 text-sm text-muted-foreground">
              <th className="px-6 py-3 text-left font-medium">Title</th>
              <th className="px-6 py-3 text-left font-medium">Severity</th>
              <th className="px-6 py-3 text-left font-medium">Repository</th>
              <th className="px-6 py-3 text-left font-medium">Status</th>
              <th className="px-6 py-3 text-left font-medium">Date</th>
            </tr>
          </thead>
          <tbody>
            {vulnerabilities.map((vuln) => (
              <tr key={vuln.id} className="border-b border-border/50 hover:bg-card/50 transition">
                <td className="px-6 py-4 text-sm">{vuln.title}</td>
                <td className="px-6 py-4">
                  <Badge className={`gap-1 ${getSeverityColor(vuln.severity)}`}>
                    {getSeverityIcon(vuln.severity)}
                    {vuln.severity.charAt(0).toUpperCase() + vuln.severity.slice(1)}
                  </Badge>
                </td>
                <td className="px-6 py-4 text-sm text-muted-foreground">{vuln.repository}</td>
                <td className="px-6 py-4">
                  <Badge className={`${getStatusColor(vuln.status)}`}>
                    {vuln.status.charAt(0).toUpperCase() + vuln.status.slice(1)}
                  </Badge>
                </td>
                <td className="px-6 py-4 text-sm text-muted-foreground">{vuln.date}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  )
}
