"use client"

import { useState, useEffect } from "react"
import { Loader2 } from "lucide-react"

interface VulnerabilityBreakdownProps {
  repoId: string
}

interface VulnerabilityData {
  name: string
  value: number
  fill: string
  color: string
}

interface VulnerabilitySummary {
  total: number
  critical: number
  high: number
  medium: number
  low: number
}

export function VulnerabilityBreakdown({ repoId }: VulnerabilityBreakdownProps) {
  const [data, setData] = useState<VulnerabilityData[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    const fetchVulnerabilityData = async () => {
      try {
        setLoading(true)
        const response = await fetch(`http://localhost:3001/api/repositories/${repoId}/vulnerabilities`)
        
        if (response.ok) {
          const vulnData = await response.json()
          const summary: VulnerabilitySummary = vulnData.summary
          
          const chartData: VulnerabilityData[] = [
            { name: "Critical", value: summary.critical, fill: "hsl(0, 84%, 60%)", color: "text-red-400" },
            { name: "High", value: summary.high, fill: "hsl(25, 95%, 53%)", color: "text-orange-400" },
            { name: "Medium", value: summary.medium, fill: "hsl(45, 93%, 47%)", color: "text-yellow-400" },
            { name: "Low", value: summary.low, fill: "hsl(142, 71%, 45%)", color: "text-green-400" },
          ]
          
          setData(chartData)
        } else {
          // Fallback for repositories without vulnerability data yet
          setData([
            { name: "Critical", value: 0, fill: "hsl(0, 84%, 60%)", color: "text-red-400" },
            { name: "High", value: 0, fill: "hsl(25, 95%, 53%)", color: "text-orange-400" },
            { name: "Medium", value: 0, fill: "hsl(45, 93%, 47%)", color: "text-yellow-400" },
            { name: "Low", value: 0, fill: "hsl(142, 71%, 45%)", color: "text-green-400" },
          ])
        }
        
        setError(null)
      } catch (err) {
        console.error('Failed to fetch vulnerability data:', err)
        setError('Failed to load vulnerability data')
        // Set default empty data
        setData([
          { name: "Critical", value: 0, fill: "hsl(0, 84%, 60%)", color: "text-red-400" },
          { name: "High", value: 0, fill: "hsl(25, 95%, 53%)", color: "text-orange-400" },
          { name: "Medium", value: 0, fill: "hsl(45, 93%, 47%)", color: "text-yellow-400" },
          { name: "Low", value: 0, fill: "hsl(142, 71%, 45%)", color: "text-green-400" },
        ])
      } finally {
        setLoading(false)
      }
    }

    if (repoId) {
      fetchVulnerabilityData()
    }
  }, [repoId])

  if (loading) {
    return (
      <div className="glass p-6 rounded-lg">
        <h2 className="text-lg font-semibold mb-6">Vulnerability Breakdown</h2>
        <div className="flex items-center justify-center py-8">
          <div className="flex items-center gap-2">
            <Loader2 className="w-4 h-4 animate-spin" />
            Loading vulnerability data...
          </div>
        </div>
      </div>
    )
  }

  const maxValue = Math.max(...data.map(d => d.value), 1) // Ensure at least 1 to avoid division by 0
  const totalVulns = data.reduce((sum, item) => sum + item.value, 0)

  return (
    <div className="glass p-6 rounded-lg">
      <h2 className="text-lg font-semibold mb-6">Vulnerability Breakdown</h2>

      {error && (
        <div className="text-yellow-500 text-sm mb-4 p-3 bg-yellow-500/10 rounded">
          {error} - Showing default data
        </div>
      )}

      {totalVulns === 0 ? (
        <div className="text-center py-8 text-muted-foreground">
          <div className="text-lg mb-2">ðŸŽ‰ No vulnerabilities found!</div>
          <div className="text-sm">This repository appears to be secure.</div>
        </div>
      ) : (
        <>
          {/* Simple bar chart replacement */}
          <div className="space-y-4 mb-6">
            {data.map((item, index) => (
              <div key={index} className="flex items-center gap-4">
                <div className="w-20 text-sm font-medium">{item.name}</div>
                <div className="flex-1 bg-card rounded-full h-6 overflow-hidden">
                  <div 
                    className="h-full transition-all duration-500 rounded-full"
                    style={{ 
                      backgroundColor: item.fill,
                      width: `${item.value > 0 ? (item.value / maxValue) * 100 : 0}%`
                    }}
                  />
                </div>
                <div className={`w-8 text-right font-bold ${item.color}`}>{item.value}</div>
              </div>
            ))}
          </div>

          <div className="grid grid-cols-4 gap-4">
            {data.map((item, index) => (
              <div key={index} className="text-center">
                <div className="w-3 h-3 rounded-full mx-auto mb-2" style={{ backgroundColor: item.fill }} />
                <div className="text-sm font-medium">{item.name}</div>
                <div className="text-2xl font-bold">{item.value}</div>
              </div>
            ))}
          </div>
        </>
      )}
    </div>
  )
}
